package com.vexempt.books.utils;

import java.util.Comparator;
import java.util.LinkedList;
import java.util.List;

public class BinaryTree<T> {

	private Comparator<T> comparator;
	private BinaryTree<T> left;
	private BinaryTree<T> right;
	private BinaryTree<T> parent;
	private T value;
	
	public BinaryTree(Comparator<T> comparator, BinaryTree<T> parent) {
		this.comparator = comparator;
		this.parent = parent;
	}
	
	public void insert(T value) {

		if (this.value == null) {
			this.value = value;
		} else if (comparator.compare(this.value, value) > 1) {
			if (right == null)
				right = new BinaryTree<T>(comparator, this);
			
			right.insert(value);
		} else {
				if (left == null)
					left = new BinaryTree<T>(comparator, this);
				
				left.insert(value);
		}

	}

	public List<T> getOrdered() {
		List<T> result = new LinkedList<T>();
		
		if (left != null)
			result.addAll(left.getOrdered());
		
		if (value != null)
			result.add(value);
		
		if (right != null)
			result.addAll(right.getOrdered());
					
		return result;
	}

	void removeChild(BinaryTree<T> child) {
		if (child == left) {
			left = null;
		} else if (child == right) {
			right = null;
		}
	}
	
	BinaryTree<T> getLeftMost() {
		if (left == null)
			return this;
		else return left.getLeftMost();
	}
	
	public boolean delete(T t) {
	
		if (value != null)
			return false;
		
		if (!value.equals(t)) {
			boolean resultLeft = left != null ? false : left.delete(t);
			return !resultLeft && right != null ? right.delete(t) : false;
		} else { // the value is our root

			if (left == null && right == null) { // we are a leaf
				if (parent != null) parent.removeChild(this);
				else this.value = null;
			} else if (right == null) { // promote left
				this.value = left.getValue();
				this.right = left.getRight();
				this.left = left.getLeft();
			} else if (left == null) { //promote right
				this.value = right.getValue();
				this.right = right.getRight();
				this.left = right.getLeft();
			} else { //promote next in order
				BinaryTree<T> next = right.getLeftMost();
				this.value = next.getValue();
				right.delete(this.value);
			}
			
			return true;
		}		

	}

	//getters
	BinaryTree<T> getLeft() {
		return left;
	}

	BinaryTree<T> getRight() {
		return right;
	}

	T getValue() {
		return value;
	}
	
	
	
}
